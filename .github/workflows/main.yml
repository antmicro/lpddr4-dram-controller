name: Generate DRAM Controller RTL
on:
  push

defaults:
  run:
    shell: bash

jobs:
  tests:
    runs-on: ubuntu-22.04
    env:
      VERILATOR_VERSION: v5.016
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip

      - name: Setup Cache Metadata
        id: cache_metadata
        run: |
          cache_restore_key=cache_verilator_
          echo "cache_date=$(date +"%Y_%m_%d")" | tee -a "$GITHUB_ENV"
          echo "cache_restore_key=$cache_restore_key" | tee -a "$GITHUB_ENV"
          echo "cache_name=$cache_restore_key${{ env.VERILATOR_VERSION }}" | tee -a "$GITHUB_ENV"
          echo "/opt/verilator/bin" >> $GITHUB_PATH

      - name: Setup cache
        uses: actions/cache@v3
        id: cache
        timeout-minutes: 60
        with:
          path: |
            /opt/verilator
            /opt/verilator/.cache
          key: ${{ env.cache_name }}
          restore-keys: ${{ env.cache_restore_key }}

      - name: Install system dependencies
        run: |
          sudo apt -qqy update
          sudo apt -qqy install --no-install-recommends git nodejs

      - name: Install Verilator prerequisities
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          sudo apt -qqy update && sudo apt -qqy --no-install-recommends install \
          autoconf automake autotools-dev \
          bc bison build-essential \
          ccache curl \
          flex \
          gawk git gperf \
          help2man \
          libexpat-dev libfl-dev libfl2 libgmp-dev \
          libmpc-dev libmpfr-dev libtool \
          ninja-build \
          patchutils python3 python3-pip \
          texinfo \
          zlib1g zlib1g-dev

      - name: Install Verilator
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: |
          export CCACHE_DIR=/opt/verilator/.cache
          ccache --show-config | grep cache_dir
          git clone https://github.com/verilator/verilator
          pushd verilator
            git checkout ${{ env.VERILATOR_VERSION }}
            autoconf
            ./configure --prefix=/opt/verilator
            make -j `nproc`
            sudo make install
          popd

      - name: Prepare Python venv and install dependencies
        run: |
          python3 -m venv env
          source ./env/bin/activate
          pip install -r requirements.txt
          pip freeze

      - name: Generate DRAM controller RTL
        run: |
          source ./env/bin/activate
          make verilog

      - name: Run tests
        run: |
          source ./env/bin/activate
          make tests | tee tests.log
          /bin/bash -c '! grep "failure" results.xml >/dev/null'

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dram-controller
          path: |
            build
            tests/*.vcd
            tests/results.xml
            tests/tests.log


  asic-flow:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        pdk:
          - name: sky130hd
            steps: drc
          - name: asap7
    env:
      YOSYS_URL: "https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2023-10-05/"
      YOSYS_TGZ: "oss-cad-suite-linux-x64-20231005.tgz"
      KLAYOUT_URL: "https://www.klayout.org/downloads/Ubuntu-22/"
      KLAYOUT_DEB: "klayout_0.28.12-1_amd64.deb"
      OPENROAD_URL: "https://github.com/Precision-Innovations/OpenROAD/releases/download/2023-10-04/"
      OPENROAD_DEB: "openroad_2.0_amd64-ubuntu22.04-2023-10-04.deb"
      DESIGN_CONFIG: "${GITHUB_WORKSPACE}/openroad/configs/${{ matrix.pdk.name }}/config.mk"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install apt dependencies
        run: |
          sudo apt -qqy update
          sudo apt -qqy --no-install-recommends install \
            gcc g++ qtbase5-dev qttools5-dev libqt5xmlpatterns5-dev \
            qtmultimedia5-dev libqt5opengl5 libqt5multimediawidgets5 \
            libqt5svg5-dev make qt5-qmake qtmultimedia5-dev qttools5-dev \
            libz-dev ruby ruby-dev python3-dev libtcl tcl-tclreadline time

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: pip

      - name: Install Python dependencies
        run: |
          pip3 install -r requirements.txt

      - name: Install OpenROAD tools
        run: |
          source .github/scripts/install_tools.sh
          install_klayout
          install_yosys
          install_openroad

      - name: Run ASIC flow
        run: |
          make PDK=${{ matrix.pdk.name }} asic

      - name: Run extra ASIC flow steps
        if: ${{ matrix.pdk.steps }}
        run: |
          echo "Running steps: ${{ matrix.pdk.steps }}"
          make PDK=${{ matrix.pdk.name }} ${{ matrix.pdk.steps }}

      - name: Save artifacts
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts
          cp -r third_party/OpenROAD-flow-scripts/flow/logs \
            third_party/OpenROAD-flow-scripts/flow/reports \
            third_party/OpenROAD-flow-scripts/flow/results \
            ${GITHUB_WORKSPACE}/artifacts

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: asic-flow-logs
          path: artifacts
